<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title><%= group.name %> | Group Chat</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    #groupInfoPanel {
      width: 0;
      transition: width 0.3s ease;
      overflow: hidden;
    }
    #groupInfoPanel.open {
      width: 320px;
    }
  </style>
</head>
<body class="flex flex-col h-screen">
  <!-- HEADER -->
  <header class="flex items-center justify-between p-4 bg-white shadow cursor-pointer group-header group-chat-container" id="groupHeader" data-group-id="<%= group._id %>">
    <div class="flex items-center space-x-3">
      <img src="<%= group.icon || '/group_icons/default.png' %>" class="w-10 h-10 rounded-full">
      <div>
        <h1 class="text-lg font-semibold"><%= group.name %></h1>
        <p class="text-xs text-gray-500"><%= group.members.length %> members</p>
      </div>
    </div>
    <!-- Call buttons will be added here by JavaScript -->
  </header>

  <!-- MAIN CONTAINER -->
  <div class="flex flex-1 overflow-hidden">
    <!-- CHAT BOX -->
    <main id="chatBox" class="flex-1 p-4 overflow-y-auto space-y-3 bg-gray-50">
      <% chats.forEach(chat => { %>
        <div class="<%= chat.from._id.toString() === currentUser._id.toString() ? 'text-right' : '' %>">
          <div class="inline-block max-w-sm rounded-lg p-3 shadow <%= chat.from._id.toString() === currentUser._id.toString() ? 'bg-blue-500 text-white rounded-br-none' : 'bg-white text-gray-900 rounded-bl-none' %>">
            <% if (chat.media) { %>
              <% if (/\.(jpg|jpeg|png|gif)$/i.test(chat.media)) { %>
                <img src="<%= chat.media %>" class="max-w-xs rounded mb-2" alt="image">
              <% } else if (/\.(mp4|webm|ogg)$/i.test(chat.media)) { %>
                <video controls class="max-w-xs rounded mb-2">
                  <source src="<%= chat.media %>">
                </video>
              <% } else if (/\.(mp3|wav|m4a|webm)$/i.test(chat.media)) { %>
                <div class="bg-white bg-opacity-20 rounded-lg p-3 mb-2 flex items-center space-x-3 min-w-48">
                  <button class="voice-play-btn p-2 bg-green-500 text-white rounded-full hover:bg-green-600 transition" 
                          data-audio-src="<%= chat.media %>">
                    <svg class="w-4 h-4 play-icon" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd"></path>
                    </svg>
                    <svg class="w-4 h-4 pause-icon hidden" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                    </svg>
                  </button>
                  <div class="flex-1">
                    <div class="flex items-center space-x-2">
                      <svg class="w-4 h-4 text-green-600" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M7 4a3 3 0 016 0v4a3 3 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8a1 1 0 10-2 0A5 5 0 015 8a1 1 0 00-2 0 7.001 7.001 0 006 6.93V17H6a1 1 0 100 2h8a1 1 0 100-2h-3v-2.07z" clip-rule="evenodd"></path>
                      </svg>
                      <span class="text-sm <%= chat.from._id.toString() === currentUser._id.toString() ? 'text-white' : 'text-gray-700' %>">Voice message</span>
                    </div>
                    <div class="voice-progress-container mt-1">
                      <div class="bg-gray-300 bg-opacity-50 rounded-full h-1">
                        <div class="voice-progress bg-green-500 h-1 rounded-full transition-all duration-100" style="width: 0%"></div>
                      </div>
                    </div>
                    <span class="voice-duration text-xs <%= chat.from._id.toString() === currentUser._id.toString() ? 'text-white text-opacity-70' : 'text-gray-500' %>">0:00</span>
                  </div>
                </div>
              <% } else { %>
                <div class="flex items-center justify-between bg-gray-100 p-3 rounded mb-2">
                  <div class="flex items-center space-x-2">
                    <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                    </svg>
                    <div class="text-sm text-left">
                      <div class="font-semibold text-gray-800">Document</div>
                      <div class="text-xs text-gray-500 break-all"><%= chat.media.split('/').pop() %></div>
                    </div>
                  </div>
                  <div class="flex gap-2">
                    <a href="<%= chat.media %>" target="_blank" class="text-blue-600 text-sm hover:underline">Open</a>
                    <a href="<%= chat.media %>" download class="text-blue-600 text-sm hover:underline">Download</a>
                  </div>
                </div>
              <% } %>
            <% } %>

            <% if(chat.msg) { %>
              <p class="break-words"><strong><%= chat.from.username %>: </strong><%= chat.msg %></p>
            <% } %>

            <% if(chat.edited) { %>
              <span class="text-xs italic"> (edited) </span>
            <% } %>
            <div class="text-right">
              <span class="text-xs opacity-70">
                <%= new Date(chat.created_at).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) %>
              </span>
            </div>
          </div>
        </div>
      <% }) %>
    </main>

    <!-- GROUP INFO PANEL -->
    <aside id="groupInfoPanel" class="bg-white border-l shadow-lg">
      <div class="p-4 flex flex-col items-center">
        <img src="<%= group.icon || '/group_icons/default.png' %>" class="w-20 h-20 rounded-full">
        <h2 class="text-lg font-semibold mt-2"><%= group.name %></h2>
        <p class="text-sm text-gray-500"><%= group.members.length %> Members</p>
        <hr class="my-4 w-full">
        <ul class="w-full">
          <% group.members.forEach(member => { %>
            <li class="py-2 border-b text-center"><%= member.username %></li>
          <% }) %>
        </ul>
        <% if (group.admin._id.toString() === currentUser._id.toString()) { %>
        <form action="/groups/<%= group._id %>/update" method="POST" enctype="multipart/form-data" class="w-full mt-4 space-y-2">
          <input type="text" name="name" placeholder="New Group Name" class="border p-2 w-full rounded">
          <input type="file" name="icon" class="border p-2 w-full rounded">
          <button class="w-full bg-blue-500 text-white py-2 rounded">Update</button>
        </form>
        <% } %>
      </div>
    </aside>
  </div>

  <!-- Voice Recording Preview -->
  <div id="voiceRecordingPreview" class="hidden p-4 bg-red-50 border-t border-red-200">
    <div class="flex items-center justify-between">
      <div class="flex items-center space-x-3">
        <div class="w-3 h-3 bg-red-500 rounded-full animate-pulse"></div>
        <span class="text-sm text-red-700">Recording...</span>
        <span id="recordingTimer" class="text-sm font-mono text-red-600">0:00</span>
      </div>
      <button id="cancelRecording" class="px-3 py-1 text-sm text-red-600 hover:bg-red-100 rounded-lg transition">
        Cancel
      </button>
    </div>
  </div>

  <!-- Voice Playback Preview -->
  <div id="voicePlaybackPreview" class="hidden p-4 bg-blue-50 border-t border-blue-200">
    <div class="flex items-center justify-between">
      <div class="flex items-center space-x-3">
        <button id="playRecordedVoice" class="p-2 bg-blue-500 text-white rounded-full hover:bg-blue-600 transition">
          <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd"></path>
          </svg>
        </button>
        <span class="text-sm text-blue-700">Voice message recorded</span>
        <span id="recordedDuration" class="text-sm font-mono text-blue-600">0:00</span>
      </div>
      <div class="flex space-x-2">
        <button id="deleteRecording" class="px-3 py-1 text-sm text-red-600 hover:bg-red-100 rounded-lg transition">
          Delete
        </button>
        <button id="sendVoiceMessage" class="px-3 py-1 text-sm bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition">
          Send
        </button>
      </div>
    </div>
  </div>

  <!-- FOOTER -->
  <footer class="p-4 bg-white shadow flex space-x-2">
    <form id="chatForm" enctype="multipart/form-data" class="flex w-full space-x-2">
      <input type="file" name="media" id="mediaInput" class="hidden">
      <label for="mediaInput" class="bg-gray-200 p-2 rounded cursor-pointer">+</label>
      <input type="text" name="msg" placeholder="Type message" class="flex-1 border p-2 rounded">
      <button type="button" id="voiceMessageBtn" class="bg-green-500 text-white p-2 rounded hover:bg-green-600 transition">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z"></path>
        </svg>
      </button>
      <button type="submit" class="bg-blue-600 text-white px-4 rounded">Send</button>
    </form>
  </footer>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    const groupId = "<%= group._id %>";
    socket.emit('joinGroup', groupId);

    const form = document.getElementById('chatForm');
    const chatBox = document.getElementById('chatBox');
    form.addEventListener('submit', async e => {
      e.preventDefault();
      const formData = new FormData(form);
      await fetch('/groupchat/' + groupId, { method: 'POST', body: formData });
      form.reset();
    });

    socket.on('group message', msg => {
      const div = document.createElement('div');
      const isMine = msg.from._id === "<%= currentUser._id %>";
      let mediaHTML = '';
      if(msg.media){
        if(/\.(jpg|jpeg|png|gif)$/i.test(msg.media)){
          mediaHTML = '<img src="'+msg.media+'" class="max-w-xs rounded mb-2">';
        } else if(/\.(mp4|webm|ogg)$/i.test(msg.media)){
          mediaHTML = '<video controls class="max-w-xs rounded mb-2"><source src="'+msg.media+'"></video>';
        } else if(/\.(mp3|wav|m4a|webm)$/i.test(msg.media)){
          mediaHTML = `
            <div class="bg-white bg-opacity-20 rounded-lg p-3 mb-2 flex items-center space-x-3 min-w-48">
              <button class="voice-play-btn p-2 bg-green-500 text-white rounded-full hover:bg-green-600 transition" 
                      data-audio-src="${msg.media}">
                <svg class="w-4 h-4 play-icon" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd"></path>
                </svg>
                <svg class="w-4 h-4 pause-icon hidden" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                </svg>
              </button>
              <div class="flex-1">
                <div class="flex items-center space-x-2">
                  <svg class="w-4 h-4 text-green-600" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M7 4a3 3 0 016 0v4a3 3 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8a1 1 0 10-2 0A5 5 0 015 8a1 1 0 00-2 0 7.001 7.001 0 006 6.93V17H6a1 1 0 100 2h8a1 1 0 100-2h-3v-2.07z" clip-rule="evenodd"></path>
                  </svg>
                  <span class="text-sm ${isMine ? 'text-white' : 'text-gray-700'}">Voice message</span>
                </div>
                <div class="voice-progress-container mt-1">
                  <div class="bg-gray-300 bg-opacity-50 rounded-full h-1">
                    <div class="voice-progress bg-green-500 h-1 rounded-full transition-all duration-100" style="width: 0%"></div>
                  </div>
                </div>
                <span class="voice-duration text-xs ${isMine ? 'text-white text-opacity-70' : 'text-gray-500'}">0:00</span>
              </div>
            </div>`;
        } else {
          mediaHTML = `
            <div class='flex items-center justify-between bg-gray-100 p-3 rounded mb-2'>
              <div class='flex items-center space-x-2'>
                <svg class='w-6 h-6 text-gray-600' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
                  <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M12 4v16m8-8H4' />
                </svg>
                <div class='text-sm text-left'>
                  <div class='font-semibold text-gray-800'>Document</div>
                  <div class='text-xs text-gray-500 break-all'>${msg.media.split('/').pop()}</div>
                </div>
              </div>
              <div class='flex gap-2'>
                <a href='${msg.media}' target='_blank' class='text-blue-600 text-sm hover:underline'>Open</a>
                <a href='${msg.media}' download class='text-blue-600 text-sm hover:underline'>Download</a>
              </div>
            </div>`;
        }
      }
      div.innerHTML = `
        <div class="${isMine ? 'text-right' : ''}">
          <div class="inline-block max-w-sm rounded-lg p-3 shadow ${isMine ? 'bg-blue-500 text-white rounded-br-none' : 'bg-white text-gray-900 rounded-bl-none'}">
            ${mediaHTML}
            ${msg.msg ? '<p><strong>'+msg.from.username+':</strong> '+msg.msg+'</p>' : ''}
            ${msg.edited ? '<span class="text-xs italic"> (edited) </span>' : ''}
            <div class="text-right"><span class="text-xs opacity-70">${new Date(msg.created_at).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</span></div>
          </div>
        </div>`;
      chatBox.appendChild(div);
      chatBox.scrollTop = chatBox.scrollHeight;
    });

    document.getElementById('groupHeader').addEventListener('click', () => {
      document.getElementById('groupInfoPanel').classList.toggle('open');
    });

    // Voice Message functionality for group chat
    class GroupVoiceMessageManager {
      constructor() {
        this.mediaRecorder = null;
        this.audioChunks = [];
        this.isRecording = false;
        this.recordedBlob = null;
        this.recordingStartTime = null;
        this.recordingTimer = null;
        this.playingAudio = null;
        
        this.initializeElements();
        this.initializeEventListeners();
      }
      
      initializeElements() {
        this.voiceBtn = document.getElementById('voiceMessageBtn');
        this.recordingPreview = document.getElementById('voiceRecordingPreview');
        this.playbackPreview = document.getElementById('voicePlaybackPreview');
        this.recordingTimerElement = document.getElementById('recordingTimer');
        this.cancelRecordingBtn = document.getElementById('cancelRecording');
        this.playRecordedBtn = document.getElementById('playRecordedVoice');
        this.deleteRecordingBtn = document.getElementById('deleteRecording');
        this.sendVoiceBtn = document.getElementById('sendVoiceMessage');
        this.recordedDurationElement = document.getElementById('recordedDuration');
      }
      
      initializeEventListeners() {
        this.voiceBtn.addEventListener('click', () => this.toggleRecording());
        this.cancelRecordingBtn.addEventListener('click', () => this.cancelRecording());
        this.playRecordedBtn.addEventListener('click', () => this.playRecordedVoice());
        this.deleteRecordingBtn.addEventListener('click', () => this.deleteRecording());
        this.sendVoiceBtn.addEventListener('click', () => this.sendVoiceMessage());
        
        document.addEventListener('click', (e) => {
          if (e.target.closest('.voice-play-btn')) {
            const btn = e.target.closest('.voice-play-btn');
            this.toggleVoicePlayback(btn);
          }
        });
      }
      
      async toggleRecording() {
        if (this.isRecording) {
          this.stopRecording();
        } else {
          await this.startRecording();
        }
      }
      
      async startRecording() {
        try {
          const stream = await navigator.mediaDevices.getUserMedia({ 
            audio: {
              echoCancellation: true,
              noiseSuppression: true,
              autoGainControl: true
            } 
          });
          
          this.mediaRecorder = new MediaRecorder(stream, {
            mimeType: 'audio/webm;codecs=opus'
          });
          
          this.audioChunks = [];
          this.recordingStartTime = Date.now();
          
          this.mediaRecorder.ondataavailable = (event) => {
            if (event.data.size > 0) {
              this.audioChunks.push(event.data);
            }
          };
          
          this.mediaRecorder.onstop = () => {
            this.recordedBlob = new Blob(this.audioChunks, { type: 'audio/webm' });
            this.showPlaybackPreview();
            stream.getTracks().forEach(track => track.stop());
          };
          
          this.mediaRecorder.start();
          this.isRecording = true;
          this.showRecordingPreview();
          this.startTimer();
          
          this.voiceBtn.classList.remove('bg-green-500');
          this.voiceBtn.classList.add('bg-red-500');
          this.voiceBtn.innerHTML = '<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><rect x="6" y="6" width="8" height="8" rx="1"></rect></svg>';
          
        } catch (error) {
          console.error('Error accessing microphone:', error);
          alert('Could not access microphone. Please check permissions.');
        }
      }
      
      stopRecording() {
        if (this.mediaRecorder && this.isRecording) {
          this.mediaRecorder.stop();
          this.isRecording = false;
          this.stopTimer();
          this.hideRecordingPreview();
          this.resetVoiceButton();
        }
      }
      
      cancelRecording() {
        if (this.mediaRecorder && this.isRecording) {
          this.mediaRecorder.stop();
          this.isRecording = false;
          this.stopTimer();
          this.hideRecordingPreview();
          this.recordedBlob = null;
          this.audioChunks = [];
          this.resetVoiceButton();
        }
      }
      
      deleteRecording() {
        this.recordedBlob = null;
        this.audioChunks = [];
        this.hidePlaybackPreview();
        this.resetVoiceButton();
      }
      
      async sendVoiceMessage() {
        if (!this.recordedBlob) return;
        
        try {
          const formData = new FormData();
          const audioFile = new File([this.recordedBlob], `voice_${Date.now()}.webm`, { type: 'audio/webm' });
          formData.append('media', audioFile);
          
          const response = await fetch('/groupchat/' + groupId, {
            method: 'POST',
            body: formData
          });
          
          if (response.ok) {
            this.deleteRecording();
          } else {
            throw new Error('Failed to send voice message');
          }
        } catch (error) {
          console.error('Error sending voice message:', error);
          alert('Failed to send voice message');
        }
      }
      
      playRecordedVoice() {
        if (!this.recordedBlob) return;
        
        const audio = new Audio(URL.createObjectURL(this.recordedBlob));
        audio.play();
        
        audio.onended = () => {
          URL.revokeObjectURL(audio.src);
        };
      }
      
      toggleVoicePlayback(button) {
        const audioSrc = button.dataset.audioSrc;
        const playIcon = button.querySelector('.play-icon');
        const pauseIcon = button.querySelector('.pause-icon');
        const progressBar = button.closest('.bg-white').querySelector('.voice-progress');
        const durationElement = button.closest('.bg-white').querySelector('.voice-duration');
        
        if (this.playingAudio && !this.playingAudio.paused && this.playingAudio.currentSrc.includes(audioSrc)) {
          this.playingAudio.pause();
          playIcon.classList.remove('hidden');
          pauseIcon.classList.add('hidden');
        } else {
          if (this.playingAudio) {
            this.playingAudio.pause();
            this.resetAllVoiceButtons();
          }
          
          this.playingAudio = new Audio(audioSrc);
          playIcon.classList.add('hidden');
          pauseIcon.classList.remove('hidden');
          
          this.playingAudio.addEventListener('loadedmetadata', () => {
            durationElement.textContent = this.formatTime(this.playingAudio.duration);
          });
          
          this.playingAudio.addEventListener('timeupdate', () => {
            const progress = (this.playingAudio.currentTime / this.playingAudio.duration) * 100;
            progressBar.style.width = `${progress}%`;
            durationElement.textContent = this.formatTime(this.playingAudio.currentTime);
          });
          
          this.playingAudio.addEventListener('ended', () => {
            playIcon.classList.remove('hidden');
            pauseIcon.classList.add('hidden');
            progressBar.style.width = '0%';
            durationElement.textContent = this.formatTime(this.playingAudio.duration);
          });
          
          this.playingAudio.play();
        }
      }
      
      resetAllVoiceButtons() {
        document.querySelectorAll('.voice-play-btn').forEach(btn => {
          const playIcon = btn.querySelector('.play-icon');
          const pauseIcon = btn.querySelector('.pause-icon');
          const progressBar = btn.closest('.bg-white').querySelector('.voice-progress');
          
          playIcon.classList.remove('hidden');
          pauseIcon.classList.add('hidden');
          if (progressBar) progressBar.style.width = '0%';
        });
      }
      
      showRecordingPreview() {
        this.recordingPreview.classList.remove('hidden');
      }
      
      hideRecordingPreview() {
        this.recordingPreview.classList.add('hidden');
      }
      
      showPlaybackPreview() {
        this.playbackPreview.classList.remove('hidden');
        const duration = (Date.now() - this.recordingStartTime) / 1000;
        this.recordedDurationElement.textContent = this.formatTime(duration);
      }
      
      hidePlaybackPreview() {
        this.playbackPreview.classList.add('hidden');
      }
      
      resetVoiceButton() {
        this.voiceBtn.classList.remove('bg-red-500');
        this.voiceBtn.classList.add('bg-green-500');
        this.voiceBtn.innerHTML = `
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z"></path>
          </svg>
        `;
      }
      
      startTimer() {
        this.recordingTimer = setInterval(() => {
          const elapsed = (Date.now() - this.recordingStartTime) / 1000;
          this.recordingTimerElement.textContent = this.formatTime(elapsed);
        }, 100);
      }
      
      stopTimer() {
        if (this.recordingTimer) {
          clearInterval(this.recordingTimer);
          this.recordingTimer = null;
        }
      }
      
      formatTime(seconds) {
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = Math.floor(seconds % 60);
        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
      }
    }

    // Initialize group voice message manager
    const groupVoiceManager = new GroupVoiceMessageManager();
  </script>
<script src="/js/group-calls.js"></script>
</body>
</html>