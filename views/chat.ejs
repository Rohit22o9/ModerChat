<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat with <%= otherUser.username %> | ModernChat</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="/style.css">
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: {
                            50: '#eff6ff', 100: '#dbeafe',
                            500: '#3b82f6', 600: '#2563eb',
                            700: '#1d4ed8', 800: '#1e40af', 900: '#1e3a8a',
                        },
                        secondary: {
                            50: '#f8fafc', 100: '#f1f5f9',
                            500: '#64748b', 600: '#475569',
                            700: '#334155', 800: '#1e293b', 900: '#0f172a',
                        }
                    }
                }
            }
        }
    </script>
    <style>
        .message-container {
            position: relative;
        }
        .message-menu {
            opacity: 0;
            transition: opacity 0.2s ease;
            pointer-events: none;
        }
        .message-container:hover .message-menu {
            opacity: 1;
            pointer-events: all;
        }
        .dropdown-menu {
            position: absolute;
            right: 0;
            top: 100%;
            z-index: 50;
            min-width: 160px;
            transform: translateY(-10px);
            opacity: 0;
            visibility: hidden;
            transition: all 0.2s ease;
        }
        .dropdown-menu.show {
            transform: translateY(0);
            opacity: 1;
            visibility: visible;
        }
        .edit-input {
            background: rgba(255, 255, 255, 0.9);
            border: 1px solid #e2e8f0;
            border-radius: 0.5rem;
            padding: 0.5rem;
            width: 100%;
            font-size: 0.875rem;
        }
        .edit-buttons {
            margin-top: 0.5rem;
            display: flex;
            gap: 0.5rem;
        }
        .deleted-message {
            opacity: 0.5;
            font-style: italic;
            background: #f3f4f6 !important;
            color: #6b7280 !important;
        }
        body, html {
            overflow-x: hidden;
        }
        .chat-messages {
            overflow-x: hidden;
            word-wrap: break-word;
            word-break: break-word;
        }
        .document-message {
            max-width: 100%;
            display: flex;
            flex-direction: column;
            flex-wrap: wrap;
        }
        .document-message .btn-group {
            flex-wrap: wrap;
        }
        /* Voice message styles */
        .voice-message-container {
            display: flex;
            align-items: center;
            gap: 10px;
            background: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(5px);
            padding: 8px 12px;
            border-radius: 1rem;
            max-width: 70%;
            word-break: break-word;
        }
        .voice-play-btn {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: #3b82f6; /* primary-500 */
            color: white;
            cursor: pointer;
            transition: background-color 0.2s ease;
            flex-shrink: 0;
        }
        .voice-play-btn:hover {
            background-color: #2563eb; /* primary-600 */
        }
        .voice-progress-bar-container {
            flex-grow: 1;
            height: 6px;
            background-color: rgba(255, 255, 255, 0.5);
            border-radius: 3px;
            cursor: pointer;
            position: relative;
            overflow: hidden;
        }
        .voice-progress {
            height: 100%;
            background-color: #3b82f6; /* primary-500 */
            border-radius: 3px;
            width: 0%;
        }
        .voice-duration {
            font-size: 0.75rem;
            color: #64748b; /* secondary-500 */
            min-width: 40px;
            text-align: right;
            flex-shrink: 0;
        }
        .voice-record-controls {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 10px;
            background-color: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(5px);
            border-radius: 1rem;
        }
        .voice-record-btn {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background-image: linear-gradient(to right, #3b82f6, #2563eb); /* primary-500 to primary-600 */
            color: white;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        .voice-record-btn:hover {
            background-image: linear-gradient(to right, #2563eb, #1d4ed8); /* primary-600 to primary-700 */
        }
        .voice-record-btn svg {
            width: 24px;
            height: 24px;
        }
        .voice-record-preview {
            display: flex;
            align-items: center;
            gap: 15px;
            padding: 10px;
            background-color: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(5px);
            border-radius: 1rem;
        }
        .voice-timer {
            font-family: 'Courier New', Courier, monospace;
            font-size: 0.875rem;
            color: #64748b; /* secondary-500 */
        }
        .voice-action-btn {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: background-color 0.2s ease;
        }
        .voice-delete-btn { background-color: #f87171; color: white; } /* red-400 */
        .voice-delete-btn:hover { background-color: #ef4444; } /* red-500 */
        .voice-play-pause-btn { background-color: #3b82f6; color: white; } /* primary-500 */
        .voice-play-pause-btn:hover { background-color: #2563eb; } /* primary-600 */
        .voice-send-btn { background-color: #3b82f6; color: white; } /* primary-500 */
        .voice-send-btn:hover { background-color: #2563eb; } /* primary-600 */
    </style>
</head>

<body class="h-screen bg-gradient-to-br from-secondary-50 via-white to-primary-50 overflow-hidden">
    <div class="h-full flex flex-col">
        <!-- Header -->
        <header class="bg-white/90 backdrop-blur-lg border-b border-secondary-200 px-4 py-3 flex-shrink-0">
            <div class="flex items-center space-x-4">
                <form action="/dashboard" method="GET" class="inline">
                    <button type="submit" class="p-2 rounded-lg hover:bg-secondary-100 transition-colors duration-200">
                        <svg class="h-5 w-5 text-secondary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                        </svg>
                    </button>
                </form>
                <div class="flex items-center space-x-3">
                    <img src="/avatars/<%= otherUser.avatar || 'default-avatar.png' %>"
                        alt="<%= otherUser.username %>"
                        class="w-10 h-10 rounded-full object-cover border-2 border-white shadow-md">
                    <div>
                        <h1 class="text-lg font-semibold text-secondary-900"><%= otherUser.username %></h1>
                        <p id="user-status" class="text-xs font-medium <%= otherUser.online ? 'text-green-600' : 'text-gray-500' %>">
                            <%= otherUser.online ? 'Online' : 'Offline' %>
                        </p>
                    </div>
                </div>
                <!-- Call buttons -->
                <div class="ml-auto flex space-x-2">
                    <button onclick="initiateCall('audio')"
                            class="p-2 rounded-lg bg-green-500 hover:bg-green-600 text-white transition-colors duration-200"
                            title="Audio Call">
                        <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                  d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
                        </svg>
                    </button>

                    <button onclick="initiateCall('video')"
                            class="p-2 rounded-lg bg-blue-500 hover:bg-blue-600 text-white transition-colors duration-200"
                            title="Video Call">
                        <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                  d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"/>
                        </svg>
                    </button>
                </div>
            </div>
        </header>

        <!-- Chat Messages -->
        <main class="flex-1 overflow-y-auto p-4 space-y-4" id="chatBox">
            <!-- Typing Indicator -->
            <div id="typingIndicator" class="hidden flex justify-start">
                <div class="bg-white/80 backdrop-blur-lg px-4 py-2 rounded-2xl rounded-bl-md border border-white/20 shadow-lg">
                    <div class="flex items-center space-x-2">
                        <div class="flex space-x-1">
                            <div class="w-2 h-2 bg-secondary-400 rounded-full animate-bounce"></div>
                            <div class="w-2 h-2 bg-secondary-400 rounded-full animate-bounce" style="animation-delay: 0.1s"></div>
                            <div class="w-2 h-2 bg-secondary-400 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
                        </div>
                        <span class="text-xs text-secondary-500" id="typingText"><%= otherUser.username %> is typing...</span>
                    </div>
                </div>
            </div>
            <% chats.forEach(chat => { %>
                <div class="flex <%= chat.from.toString() === currentUser._id.toString() ? 'justify-end' : 'justify-start' %>" data-id="<%= chat._id %>">
                    <div class="message-container relative">
                        <div class="max-w-xs lg:max-w-md px-4 py-3 rounded-2xl
                                    <%= chat.from.toString() === currentUser._id.toString()
                                        ? 'bg-gradient-to-r from-primary-500 to-primary-600 text-white rounded-br-md'
                                        : 'bg-white/80 backdrop-blur-lg text-secondary-900 rounded-bl-md border border-white/20' %> shadow-lg">
                            <% if (chat.media) {
                                const ext = chat.media.split('.').pop().toLowerCase();
                                const isImage = ['png','jpg','jpeg','gif','webp'].includes(ext);
                                const isVoice = ['webm','ogg','mp3'].includes(ext);
                            %>
                                <% if (isImage) { %>
                                    <div class="mb-2">
                                        <img src="<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>"
                                             alt="Media" class="rounded-md max-h-60 shadow">
                                    </div>
                                <% } else if (isVoice) { %>
                                    <div class="voice-message-container">
                                        <button class="voice-play-btn" data-audio-src="<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>">
                                            <svg class="play-icon h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.166a1 1 0 00-1.197-.773 1 1 0 00-.773 1.197l.62 4.361a1 1 0 01-.467 1.062L10 20v-8.752c0-.248.537-.484 1.2-.659l3.493-1.747Z"/>
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19v-6.752c0-.248.537-.484 1.2-.659l3.493-1.747a1 1 0 00.595-.883L14.752 11.166z"/>
                                            </svg>
                                            <svg class="pause-icon h-6 w-6 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                            </svg>
                                        </button>
                                        <div class="voice-progress-bar-container">
                                            <div class="voice-progress"></div>
                                        </div>
                                        <div class="voice-duration">0:00</div>
                                    </div>
                                <% } else {
                                    const extColor =
                                        ext === 'pdf' ? 'text-red-500' :
                                        ['doc','docx'].includes(ext) ? 'text-blue-600' :
                                        ['xls','xlsx'].includes(ext) ? 'text-green-600' :
                                        ['ppt','pptx'].includes(ext) ? 'text-orange-500' :
                                        ['zip','rar'].includes(ext) ? 'text-yellow-500' :
                                        'text-gray-600';
                                %>
                                    <div class="bg-gray-100 rounded-md p-3 mb-2 shadow flex flex-col space-y-2">
                                        <div class="flex items-center space-x-3">
                                            <svg class="w-6 h-6 <%= extColor %>" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                                                <path d="M12 2H6a2 2 0 00-2 2v16a2 2 0 002 2h12a2 2 0 002-2V8z"/>
                                                <polyline points="12 2 12 8 18 8"/>
                                            </svg>
                                            <div>
                                                <p class="font-semibold text-gray-800 text-sm truncate max-w-xs">
                                                    <%= chat.originalName || chat.media.split('/').pop() %>
                                                </p>
                                                <p class="text-xs text-gray-500 uppercase">DOCUMENT</p>
                                            </div>
                                        </div>
                                        <div class="flex space-x-3 mt-1">
                                            <a href="<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>" target="_blank"
                                               class="text-xs px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600">Open</a>
                                            <a href="<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>" download
                                               class="text-xs px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600">Download</a>
                                        </div>
                                    </div>
                                <% } %>
                            <% } %>

                            <% if (chat.msg) { %>
                                <div class="message-text">
                                    <p class="text-sm leading-relaxed"><%= chat.msg %></p>
                                </div>
                            <% } %>
                            <div class="flex items-center justify-between mt-2">
                                <span class="text-xs <%= chat.from.toString() === currentUser._id.toString() ? 'text-primary-100' : 'text-secondary-500' %>">
                                    <%= new Date(chat.created_at).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }) %>
                                    <% if (chat.edited) { %>
                                        <span class="ml-1 italic">(edited)</span>
                                    <% } %>
                                </span>
                                <% if (chat.from.toString() === currentUser._id.toString()) { %>
                                    <div class="message-status flex items-center">
                                        <% if (chat.status === 'sent') { %>
                                            <svg class="w-4 h-4 text-primary-200" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                                            </svg>
                                        <% } else if (chat.status === 'delivered') { %>
                                            <svg class="w-4 h-4 text-primary-200" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                                            </svg>
                                            <svg class="w-4 h-4 text-primary-200 -ml-1" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                                            </svg>
                                        <% } else if (chat.status === 'seen') { %>
                                            <svg class="w-4 h-4 text-blue-400" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                                            </svg>
                                            <svg class="w-4 h-4 text-blue-400 -ml-1" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                                            </svg>
                                        <% } %>
                                    </div>
                                <% } %>
                            </div>
                        </div>

                        <!-- Message Menu (only show for current user's messages) -->
                        <% if (chat.from.toString() === currentUser._id.toString()) { %>
                            <div class="message-menu absolute -right-2 top-2">
                                <button class="menu-trigger p-1 rounded-full hover:bg-gray-200 hover:bg-opacity-50" onclick="toggleMenu(this)">
                                    <svg class="h-4 w-4 text-gray-600" fill="currentColor" viewBox="0 0 24 24">
                                        <path d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"/>
                                    </svg>
                                </button>
                                <div class="dropdown-menu bg-white rounded-lg shadow-lg border border-gray-200 py-1">
                                    <% if (chat.msg) { %>
                                        <button onclick="editMessage('<%= chat._id %>')" class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center">
                                            <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                            </svg>
                                            Edit Message
                                        </button>
                                    <% } %>
                                    <button onclick="deleteMessage('<%= chat._id %>', 'forMe')" class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center">
                                        <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                        </svg>
                                        Delete for Me
                                    </button>
                                    <button onclick="deleteMessage('<%= chat._id %>', 'forEveryone')" class="w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50 flex items-center">
                                        <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                        </svg>
                                        Delete for Everyone
                                    </button>
                                </div>
                            </div>
                        <% } %>
                    </div>
                </div>
            <% }) %>
        </main>

        <!-- Media Preview -->
        <div id="filePreview" class="hidden flex items-center justify-between p-3 bg-white/90 backdrop-blur-lg border border-secondary-200 rounded-xl mx-4 mb-2 shadow-lg">
            <div id="previewContent" class="flex items-center space-x-3 flex-1"></div>
            <button id="removeFile" type="button" class="ml-3 p-1 rounded-full hover:bg-secondary-100 text-secondary-500 hover:text-red-500 transition-colors">
                <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        </div>

        <!-- Voice Message Preview -->
        <div id="voiceRecordingPreview" class="hidden voice-record-preview mx-4 mb-2">
            <button id="cancelRecording" class="voice-action-btn voice-delete-btn">
                <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
            <div class="voice-timer" id="recordingTimer">0:00</div>
            <button id="playRecordedVoice" class="voice-action-btn voice-play-pause-btn">
                <svg class="play-icon h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.166a1 1 0 00-1.197-.773 1 1 0 00-.773 1.197l.62 4.361a1 1 0 01-.467 1.062L10 20v-8.752c0-.248.537-.484 1.2-.659l3.493-1.747Z"/>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19v-6.752c0-.248.537-.484 1.2-.659l3.493-1.747a1 1 0 00.595-.883L14.752 11.166z"/>
                </svg>
                <svg class="pause-icon h-5 w-5 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                </svg>
            </button>
            <div class="voice-progress-bar-container w-32">
                <div class="voice-progress"></div>
            </div>
            <div class="voice-duration" id="recordedDuration">0:00</div>
            <button id="sendVoiceMessage" class="voice-action-btn voice-send-btn">
                <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                </svg>
            </button>
        </div>

        <!-- Message Input -->
        <footer class="bg-white/90 backdrop-blur-lg border-t border-secondary-200 p-4 flex-shrink-0">
            <form id="chatForm" enctype="multipart/form-data" class="flex items-center space-x-3">
                <input type="file" name="media" class="hidden" id="mediaInput">
                <label for="mediaInput" class="cursor-pointer p-3 rounded-xl bg-secondary-100 hover:bg-secondary-200 transition">
                    <svg class="h-5 w-5 text-secondary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13"></path>
                    </svg>
                </label>

                <!-- Voice Message Button -->
                <button type="button" id="voiceMessageBtn" class="p-3 rounded-xl bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white transition-all duration-200 transform hover:scale-105 active:scale-95 shadow-lg hover:shadow-xl">
                    <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z"></path>
                    </svg>
                </button>

                <div class="flex-1 relative">
                    <input type="text" name="msg" placeholder="Type your message..."
                           class="w-full px-4 py-3 bg-secondary-50 border border-secondary-200 rounded-2xl focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all duration-200 pr-12"
                           autocomplete="off">
                </div>
                <button type="submit" class="inline-flex items-center justify-center w-12 h-12 bg-gradient-to-r from-primary-500 to-primary-600 hover:from-primary-600 hover:to-primary-700 text-white rounded-2xl focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-all duration-200 transform hover:scale-105 active:scale-95 shadow-lg hover:shadow-xl">
                    <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                    </svg>
                </button>
            </form>
        </footer>
    </div>

    <!-- Call Modal -->
    <div id="callModal" class="hidden fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg max-w-md w-full mx-4 overflow-hidden">
            <!-- Incoming Call Screen -->
            <div id="incomingCallScreen" class="hidden p-6 text-center">
                <img id="callerAvatar" src="" class="w-24 h-24 rounded-full mx-auto mb-4 object-cover">
                <h3 id="callerName" class="text-xl font-semibold mb-2"></h3>
                <p id="callTypeText" class="text-gray-600 mb-6"></p>

                <div class="flex justify-center space-x-4">
                    <button onclick="declineCall()"
                            class="bg-red-500 hover:bg-red-600 text-white p-4 rounded-full transition-colors">
                        <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                  d="M16 8l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2M3 3l1.5 1.5m0 0l1.5 1.5M6 5v10a2 2 0 002 2h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2z"/>
                        </svg>
                    </button>
                    <button onclick="acceptCall()"
                            class="bg-green-500 hover:bg-green-600 text-white p-4 rounded-full transition-colors">
                        <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                  d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
                        </svg>
                    </button>
                </div>
            </div>

            <!-- Active Call Screen -->
            <div id="activeCallScreen" class="hidden">
                <div class="relative bg-gray-900 aspect-video">
                    <video id="remoteVideo" class="w-full h-full object-cover" autoplay playsinline></video>
                    <video id="localVideo" class="absolute bottom-4 right-4 w-32 h-24 object-cover rounded-lg border-2 border-white" autoplay playsinline muted></video>

                    <!-- Call Controls -->
                    <div class="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-4">
                        <button id="muteBtn" onclick="toggleMute()"
                                class="bg-gray-800 bg-opacity-75 text-white p-3 rounded-full hover:bg-opacity-100 transition-all">
                            <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                      d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z"/>
                            </svg>
                        </button>

                        <button id="videoBtn" onclick="toggleVideo()"
                                class="bg-gray-800 bg-opacity-75 text-white p-3 rounded-full hover:bg-opacity-100 transition-all">
                            <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                      d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"/>
                            </svg>
                        </button>

                        <button onclick="endCall()"
                                class="bg-red-600 text-white p-3 rounded-full hover:bg-red-700 transition-colors">
                            <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                      d="M16 8l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2M3 3l1.5 1.5m0 0l1.5 1.5M6 5v10a2 2 0 002 2h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2z"/>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Connecting Screen -->
            <div id="connectingScreen" class="hidden p-6 text-center">
                <div class="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-600 mx-auto mb-4"></div>
                <h3 class="text-xl font-semibold mb-2">Connecting...</h3>
                <p class="text-gray-600">Please wait while we connect your call</p>

                <button onclick="cancelCall()"
                        class="mt-4 bg-red-500 hover:bg-red-600 text-white px-6 py-2 rounded-lg transition-colors">
                    Cancel Call
                </button>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        // Global variables
        const socket = io();
        const currentUserId = "<%= currentUser._id %>";
        const otherUserId = "<%= otherUser._id %>";
        const roomId = [currentUserId, otherUserId].sort().join('_');
        const chatBox = document.getElementById('chatBox');
        const form = document.getElementById('chatForm');
        const msgInput = form.querySelector('input[name="msg"]');
        const mediaInput = document.getElementById('mediaInput');
        const statusElem = document.getElementById('user-status');
        const filePreview = document.getElementById('filePreview');
        const previewContent = document.getElementById('previewContent');
        const typingIndicator = document.getElementById('typingIndicator');
        
        // Typing functionality
        let typingTimer;
        let isTyping = false;
        const removeFile = document.getElementById('removeFile');
        const voiceMessageBtn = document.getElementById('voiceMessageBtn');
        const voiceRecordingPreview = document.getElementById('voiceRecordingPreview');
        const cancelRecording = document.getElementById('cancelRecording');
        const recordingTimer = document.getElementById('recordingTimer');
        const playRecordedVoice = document.getElementById('playRecordedVoice');
        const sendVoiceMessage = document.getElementById('sendVoiceMessage');
        const recordedDuration = document.getElementById('recordedDuration');
        const voiceProgress = document.querySelectorAll('.voice-progress');
        const voiceDuration = document.querySelectorAll('.voice-duration');
        const voicePlayBtns = document.querySelectorAll('.voice-play-btn');

        // Utility functions
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function scrollToBottom() {
            chatBox.scrollTop = chatBox.scrollHeight;
        }

        function showNotification(message, type = 'info') {
            // Simple notification - you can enhance this
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 ${
                type === 'error' ? 'bg-red-500 text-white' :
                type === 'success' ? 'bg-green-500 text-white' :
                'bg-blue-500 text-white'
            }`;
            notification.textContent = message;
            document.body.appendChild(notification);

            setTimeout(() => {
                notification.remove();
            }, 3000);
        }

        // Initialize socket events
        socket.emit('userOnline', currentUserId);
        socket.emit('joinRoom', roomId);
        socket.emit('messages seen', { from: otherUserId, to: currentUserId });
        scrollToBottom();

        // Typing detection
        msgInput.addEventListener('input', () => {
            if (!isTyping) {
                isTyping = true;
                socket.emit('typing start', {
                    from: currentUserId,
                    to: otherUserId,
                    username: "<%= currentUser.username %>"
                });
            }
            
            clearTimeout(typingTimer);
            typingTimer = setTimeout(() => {
                isTyping = false;
                socket.emit('typing stop', {
                    from: currentUserId,
                    to: otherUserId,
                    username: "<%= currentUser.username %>"
                });
            }, 1000);
        });

        msgInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                clearTimeout(typingTimer);
                if (isTyping) {
                    isTyping = false;
                    socket.emit('typing stop', {
                        from: currentUserId,
                        to: otherUserId,
                        username: "<%= currentUser.username %>"
                    });
                }
            }
        });

        // Close dropdown when clicking outside
        document.addEventListener('click', (e) => {
            if (!e.target.closest('.message-menu')) {
                document.querySelectorAll('.dropdown-menu').forEach(menu => {
                    menu.classList.remove('show');
                });
            }
        });

        // Toggle dropdown menu
        function toggleMenu(button) {
            const dropdown = button.nextElementSibling;
            const isShown = dropdown.classList.contains('show');

            // Close all other dropdowns
            document.querySelectorAll('.dropdown-menu').forEach(menu => {
                menu.classList.remove('show');
            });

            // Toggle current dropdown
            if (!isShown) {
                dropdown.classList.add('show');
            }
        }

        // Delete message function - FIXED VERSION
        async function deleteMessage(messageId, deleteType) {
            if (!messageId) {
                console.error('Message ID is required');
                return;
            }

            try {
                const response = await fetch(`/message/${messageId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ deleteType })
                });

                if (response.ok) {
                    // Close dropdown after successful deletion
                    document.querySelectorAll('.dropdown-menu').forEach(menu => {
                        menu.classList.remove('show');
                    });
                } else {
                    const error = await response.json();
                    showNotification('Error: ' + (error.error || 'Failed to delete message'), 'error');
                }
            } catch (error) {
                console.error('Delete error:', error);
                showNotification('Failed to delete message', 'error');
            }
        }

        // Edit message function
        function editMessage(messageId) {
            if (!messageId) {
                console.error('Message ID is required');
                return;
            }

            const messageContainer = document.querySelector(`[data-id="${messageId}"]`);
            if (!messageContainer) {
                console.error('Message not found');
                return;
            }

            const messageTextDiv = messageContainer.querySelector('.message-text');
            if (!messageTextDiv) {
                console.error('Message text not found');
                return;
            }

            const currentText = messageTextDiv.querySelector('p').textContent;

            // Replace message text with input
            messageTextDiv.innerHTML = `
                <input type="text" class="edit-input" value="${escapeHtml(currentText)}" onkeypress="handleEditKeypress(event, '${messageId}')" />
                <div class="edit-buttons">
                    <button onclick="saveEdit('${messageId}')" class="px-2 py-1 bg-blue-500 text-white text-xs rounded hover:bg-blue-600">Save</button>
                    <button onclick="cancelEdit('${messageId}', '${escapeHtml(currentText)}')" class="px-2 py-1 bg-gray-500 text-white text-xs rounded hover:bg-gray-600">Cancel</button>
                </div>
            `;

            // Focus on input and close dropdown
            const input = messageTextDiv.querySelector('.edit-input');
            input.focus();
            input.select();

            // Close dropdown
            document.querySelectorAll('.dropdown-menu').forEach(menu => {
                menu.classList.remove('show');
            });
        }

        // Handle Enter key in edit input
        function handleEditKeypress(event, messageId) {
            if (event.key === 'Enter') {
                event.preventDefault();
                saveEdit(messageId);
            } else if (event.key === 'Escape') {
                event.preventDefault();
                const messageContainer = document.querySelector(`[data-id="${messageId}"]`);
                const messageTextDiv = messageContainer.querySelector('.message-text');
                const input = messageTextDiv.querySelector('.edit-input');
                const originalText = input.defaultValue;
                cancelEdit(messageId, originalText);
            }
        }

        // Save edited message
        async function saveEdit(messageId) {
            if (!messageId) {
                console.error('Message ID is required');
                return;
            }

            const messageContainer = document.querySelector(`[data-id="${messageId}"]`);
            const messageTextDiv = messageContainer.querySelector('.message-text');
            const input = messageTextDiv.querySelector('.edit-input');
            const newText = input.value.trim();

            if (!newText) {
                showNotification('Message cannot be empty', 'error');
                return;
            }

            try {
                const response = await fetch(`/message/${messageId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ newMessage: newText })
                });

                if (response.ok) {
                    // Message will be updated via socket event
                } else {
                    const error = await response.json();
                    showNotification('Error: ' + (error.error || 'Failed to edit message'), 'error');
                    // Restore original text
                    const originalText = input.defaultValue;
                    cancelEdit(messageId, originalText);
                }
            } catch (error) {
                console.error('Edit error:', error);
                showNotification('Failed to edit message', 'error');
                // Restore original text
                const originalText = input.defaultValue;
                cancelEdit(messageId, originalText);
            }
        }

        // Cancel edit
        function cancelEdit(messageId, originalText) {
            const messageContainer = document.querySelector(`[data-id="${messageId}"]`);
            const messageTextDiv = messageContainer.querySelector('.message-text');
            messageTextDiv.innerHTML = `<p class="text-sm leading-relaxed">${escapeHtml(originalText)}</p>`;
        }

        // Media preview handler
        mediaInput.addEventListener('change', () => {
            const file = mediaInput.files[0];
            if (file) {
                showFilePreview(file);
            } else {
                hideFilePreview();
            }
        });

        function showFilePreview(file) {
            const ext = file.name.split('.').pop().toLowerCase();
            const isImage = ['png','jpg','jpeg','gif','webp'].includes(ext);
            const isVoice = ['webm','ogg','mp3','m4a','wav'].includes(ext);
            const fileSize = formatFileSize(file.size);

            if (isImage) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    previewContent.innerHTML = `
                        <div class="flex items-center space-x-3">
                            <img src="${e.target.result}" class="h-12 w-12 rounded-lg object-cover shadow border" alt="Preview" />
                            <div class="flex-1 min-w-0">
                                <p class="font-medium text-secondary-900 text-sm truncate">${escapeHtml(file.name)}</p>
                                <p class="text-xs text-secondary-500">Image • ${fileSize}</p>
                            </div>
                        </div>
                    `;
                };
                reader.readAsDataURL(file);
            } else if (isVoice) {
                previewContent.innerHTML = `
                    <div class="flex items-center space-x-3">
                        <div class="h-12 w-12 rounded-lg bg-green-100 flex items-center justify-center">
                            <svg class="h-6 w-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z"></path>
                            </svg>
                        </div>
                        <div class="flex-1 min-w-0">
                            <p class="font-medium text-secondary-900 text-sm truncate">${escapeHtml(file.name)}</p>
                            <p class="text-xs text-secondary-500">Audio • ${fileSize}</p>
                        </div>
                    </div>
                `;
            } else {
                const extIconColor =
                    ext === 'pdf' ? 'text-red-500' :
                    ['doc','docx'].includes(ext) ? 'text-blue-600' :
                    ['xls','xlsx'].includes(ext) ? 'text-green-600' :
                    ['ppt','pptx'].includes(ext) ? 'text-orange-500' :
                    ['zip','rar'].includes(ext) ? 'text-yellow-500' : 'text-gray-600';

                const extBgColor =
                    ext === 'pdf' ? 'bg-red-100' :
                    ['doc','docx'].includes(ext) ? 'bg-blue-100' :
                    ['xls','xlsx'].includes(ext) ? 'bg-green-100' :
                    ['ppt','pptx'].includes(ext) ? 'bg-orange-100' :
                    ['zip','rar'].includes(ext) ? 'bg-yellow-100' : 'bg-gray-100';

                previewContent.innerHTML = `
                    <div class="flex items-center space-x-3">
                        <div class="h-12 w-12 rounded-lg ${extBgColor} flex items-center justify-center">
                            <svg class="w-6 h-6 ${extIconColor}" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                                <path d="M12 2H6a2 2 0 00-2 2v16a2 2 0 002 2h12a2 2 0 002-2V8z"/>
                                <polyline points="12 2 12 8 18 8"/>
                            </svg>
                        </div>
                        <div class="flex-1 min-w-0">
                            <p class="font-medium text-secondary-900 text-sm truncate">${escapeHtml(file.name)}</p>
                            <p class="text-xs text-secondary-500">${ext.toUpperCase()} Document • ${fileSize}</p>
                        </div>
                    </div>
                `;
            }
            filePreview.classList.remove('hidden');
        }

        function hideFilePreview() {
            filePreview.classList.add('hidden');
            previewContent.innerHTML = '';
        }

        function formatFileSize(bytes) {
            if (bytes === 0) return '0 B';
            const k = 1024;
            const sizes = ['B', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
        }

        removeFile.addEventListener('click', () => {
            mediaInput.value = '';
            hideFilePreview();
        });

        // Send message - FIXED VERSION
        form.addEventListener('submit', async (e) => {
            e.preventDefault();

            const msg = msgInput.value.trim();
            const file = mediaInput.files[0];
            if (!msg && !file) return;

            try {
                const formData = new FormData();
                if (msg) formData.append('msg', msg);
                if (file) formData.append('media', file);

                const res = await fetch(`/chat/${otherUserId}`, {
                    method: 'POST',
                    body: formData
                });

                if (!res.ok) {
                    throw new Error(`HTTP error! status: ${res.status}`);
                }

                const data = await res.json();

                // Reset input fields and hide preview
                msgInput.value = '';
                mediaInput.value = '';
                hideFilePreview();

                // Message will be added via socket event
            } catch (error) {
                console.error('Send message error:', error);
                showNotification('Failed to send message', 'error');
            }
        });

        // Helper function for message status icons
        function getMessageStatusIcon(status) {
            switch(status) {
                case 'sent':
                    return `<div class="message-status flex items-center">
                        <svg class="w-4 h-4 text-primary-200" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                        </svg>
                    </div>`;
                case 'delivered':
                    return `<div class="message-status flex items-center">
                        <svg class="w-4 h-4 text-primary-200" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                        </svg>
                        <svg class="w-4 h-4 text-primary-200 -ml-1" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                        </svg>
                    </div>`;
                case 'seen':
                    return `<div class="message-status flex items-center">
                        <svg class="w-4 h-4 text-blue-400" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                        </svg>
                        <svg class="w-4 h-4 text-blue-400 -ml-1" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                        </svg>
                    </div>`;
                default:
                    return '';
            }
        }

        // Socket event handlers
        socket.on('chat message', (data) => {
            try {
                const isCurrentUser = data.from === currentUserId;
                const bubbleClass = isCurrentUser
                    ? 'bg-gradient-to-r from-primary-500 to-primary-600 text-white rounded-br-md'
                    : 'bg-white/80 backdrop-blur-lg text-secondary-900 rounded-bl-md border border-white/20';

                let mediaHTML = '';
                if (data.media) {
                    const ext = data.media.split('.').pop().toLowerCase();
                    const isImage = ['png','jpg','jpeg','gif','webp'].includes(ext);
                    const isVoice = ['webm','ogg','mp3'].includes(ext);

                    if (isImage) {
                        mediaHTML = `
                            <div class="mb-2">
                                <img src="${escapeHtml(data.media)}" class="rounded-md max-h-60 shadow" alt="Media">
                            </div>`;
                    } else if (isVoice) {
                         mediaHTML = `
                            <div class="voice-message-container">
                                <button class="voice-play-btn" data-audio-src="${escapeHtml(data.media)}">
                                    <svg class="play-icon h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.166a1 1 0 00-1.197-.773 1 1 0 00-.773 1.197l.62 4.361a1 1 0 01-.467 1.062L10 20v-8.752c0-.248.537-.484 1.2-.659l3.493-1.747Z"/>
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19v-6.752c0-.248.537-.484 1.2-.659l3.493-1.747a1 1 0 00.595-.883L14.752 11.166z"/>
                                    </svg>
                                    <svg class="pause-icon h-6 w-6 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                    </svg>
                                </button>
                                <div class="voice-progress-bar-container">
                                    <div class="voice-progress"></div>
                                </div>
                                <div class="voice-duration">0:00</div>
                            </div>`;
                    } else {
                        const extColor =
                            ext === 'pdf' ? 'text-red-500' :
                            ['doc','docx'].includes(ext) ? 'text-blue-600' :
                            ['xls','xlsx'].includes(ext) ? 'text-green-600' :
                            ['ppt','pptx'].includes(ext) ? 'text-orange-500' :
                            ['zip','rar'].includes(ext) ? 'text-yellow-500' : 'text-gray-600';

                        mediaHTML = `
                            <div class="bg-gray-100 rounded-md p-3 mb-2 shadow flex flex-col space-y-2">
                                <div class="flex items-center space-x-3">
                                    <svg class="w-6 h-6 ${extColor}" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                                        <path d="M12 2H6a2 2 0 00-2 2v16a2 2 0 002 2h12a2 2 0 002-2V8z"/>
                                        <polyline points="12 2 12 8 18 8"/>
                                    </svg>
                                    <div>
                                        <p class="font-semibold text-gray-800 text-sm truncate max-w-xs">${escapeHtml(data.originalName || data.media.split('/').pop())}</p>
                                        <p class="text-xs text-gray-500 uppercase">DOCUMENT</p>
                                    </div>
                                </div>
                                <div class="flex space-x-3 mt-1">
                                    <a href="${escapeHtml(data.media)}" target="_blank" class="text-xs px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600">Open</a>
                                    <a href="${escapeHtml(data.media)}" download="${escapeHtml(data.originalName || data.media.split('/').pop())}" class="text-xs px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600">Download</a>
                                </div>
                            </div>`;
                    }
                }

                const statusIcon = isCurrentUser ? getMessageStatusIcon(data.status || 'sent') : '';
                
                const msgHTML = `
                    <div class="flex ${isCurrentUser ? 'justify-end' : 'justify-start'}" data-id="${escapeHtml(data._id)}">
                        <div class="message-container relative">
                            <div class="max-w-xs lg:max-w-md px-4 py-3 rounded-2xl ${bubbleClass} shadow-lg">
                                ${mediaHTML}
                                ${data.msg ? `<div class="message-text"><p class="text-sm leading-relaxed">${escapeHtml(data.msg)}</p></div>` : ''}
                                <div class="flex items-center justify-between mt-2">
                                    <span class="text-xs ${isCurrentUser ? 'text-primary-100' : 'text-secondary-500'}">
                                        ${new Date().toLocaleTimeString('en-US',{hour:'2-digit',minute:'2-digit'})}
                                        ${data.edited ? '<span class="ml-1 italic">(edited)</span>' : ''}
                                    </span>
                                    ${statusIcon}
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                chatBox.insertAdjacentHTML('beforeend', msgHTML);
                scrollToBottom();
            } catch (error) {
                console.error('Error handling chat message:', error);
            }
        });

        // Handle message deletion
        socket.on('message deleted', ({ messageId, deleteType }) => {
            try {
                const messageElement = document.querySelector(`[data-id="${messageId}"]`);
                if (messageElement) {
                    if (deleteType === 'forEveryone') {
                        messageElement.remove();
                    } else {
                        messageElement.remove();
                    }
                }
            } catch (error) {
                console.error('Error handling message deletion:', error);
            }
        });

        // Handle message editing
        socket.on('message edited', (updatedMessage) => {
            try {
                const messageElement = document.querySelector(`[data-id="${updatedMessage._id}"]`);
                if (messageElement) {
                    const messageTextDiv = messageElement.querySelector('.message-text');
                    const timeSpan = messageElement.querySelector('.text-xs');

                    if (messageTextDiv) {
                        messageTextDiv.innerHTML = `<p class="text-sm leading-relaxed">${escapeHtml(updatedMessage.msg)}</p>`;
                    }

                    // Update timestamp to show edited
                    if (timeSpan && !timeSpan.innerHTML.includes('(edited)')) {
                        timeSpan.innerHTML += ' <span class="ml-1 italic">(edited)</span>';
                    }
                }
            } catch (error) {
                console.error('Error handling message edit:', error);
            }
        });

        // User status
        socket.on('userStatus', ({ userId, online }) => {
            try {
                if(userId === otherUserId) {
                    statusElem.textContent = online ? 'Online' : 'Offline';
                    statusElem.className = `text-xs font-medium ${online ? 'text-green-600' : 'text-gray-500'}`;
                }
            } catch (error) {
                console.error('Error handling user status:', error);
            }
        });

        // Typing indicator
        socket.on('user typing', ({ userId, username, isTyping }) => {
            try {
                if (userId === otherUserId) {
                    if (isTyping) {
                        typingIndicator.classList.remove('hidden');
                        scrollToBottom();
                    } else {
                        typingIndicator.classList.add('hidden');
                    }
                }
            } catch (error) {
                console.error('Error handling typing status:', error);
            }
        });

        // Message status updates
        socket.on('message status update', ({ messageId, status }) => {
            try {
                const messageElement = document.querySelector(`[data-id="${messageId}"]`);
                if (messageElement) {
                    const statusElement = messageElement.querySelector('.message-status');
                    if (statusElement) {
                        statusElement.innerHTML = getMessageStatusIcon(status).replace('<div class="message-status flex items-center">', '').replace('</div>', '');
                    }
                }
            } catch (error) {
                console.error('Error updating message status:', error);
            }
        });

        // Call Manager Class - IMPROVED VERSION
        class CallManager {
            constructor() {
                this.localStream = null;
                this.remoteStream = null;
                this.peerConnection = null;
                this.currentCall = null;
                this.isInitiator = false;
                this.isMuted = false;
                this.isVideoOff = false;
                this.ringtone = null;

                // WebRTC configuration - Added more STUN servers and TURN servers
                this.configuration = {
                    iceServers: [
                        { urls: 'stun:stun.l.google.com:19302' },
                        { urls: 'stun:stun1.l.google.com:19302' },
                        { urls: 'stun:stun2.l.google.com:19302' },
                        { urls: 'stun:stun3.l.google.com:19302' },
                        { urls: 'stun:stun4.l.google.com:19302' }
                        // Add TURN servers for production:
                        // { urls: 'turn:your-turn-server.com', username: 'user', credential: 'pass' }
                    ]
                };

                this.initializeSocketEvents();
            }

            initializeSocketEvents() {
                // Listen for incoming calls
                socket.on('incoming-call', (data) => {
                    this.handleIncomingCall(data);
                });

                // Listen for call accepted
                socket.on('call-accepted', (data) => {
                    this.handleCallAccepted(data);
                });

                // Listen for call declined
                socket.on('call-declined', (data) => {
                    this.handleCallDeclined(data);
                });

                // Listen for call ended
                socket.on('call-ended', (data) => {
                    this.handleCallEnded(data);
                });

                // Listen for call cancelled
                socket.on('call-cancelled', (data) => {
                    this.handleCallCancelled(data);
                });

                // WebRTC signaling events
                socket.on('call-offer', (data) => {
                    this.handleOffer(data);
                });

                socket.on('call-answer', (data) => {
                    this.handleAnswer(data);
                });

                socket.on('ice-candidate', (data) => {
                    this.handleIceCandidate(data);
                });
            }

            async initiatePeerConnection(isVideo = false) {
                try {
                    // Create peer connection
                    this.peerConnection = new RTCPeerConnection(this.configuration);

                    // Set up event handlers
                    this.peerConnection.onicecandidate = (event) => {
                        if (event.candidate && this.currentCall) {
                            socket.emit('ice-candidate', {
                                candidate: event.candidate,
                                to: this.isInitiator ? this.currentCall.receiver?.id : this.currentCall.caller?.id,
                                callId: this.currentCall.callId
                            });
                        }
                    };

                    this.peerConnection.ontrack = (event) => {
                        this.remoteStream = event.streams[0];
                        const remoteVideo = document.getElementById('remoteVideo');
                        if (remoteVideo) {
                            remoteVideo.srcObject = this.remoteStream;
                        }
                    };

                    this.peerConnection.onconnectionstatechange = () => {
                        console.log('Connection state:', this.peerConnection.connectionState);
                        if (this.peerConnection.connectionState === 'failed') {
                            this.showError('Connection failed. Please try again.');
                            this.endCall();
                        }
                    };

                    // Get user media with error handling
                    const constraints = {
                        audio: true,
                        video: isVideo
                    };

                    this.localStream = await navigator.mediaDevices.getUserMedia(constraints);

                    // Add local stream to peer connection
                    this.localStream.getTracks().forEach(track => {
                        this.peerConnection.addTrack(track, this.localStream);
                    });

                    // Display local video
                    const localVideo = document.getElementById('localVideo');
                    if (localVideo && isVideo) {
                        localVideo.srcObject = this.localStream;
                        localVideo.style.display = 'block';
                    } else if (localVideo) {
                        localVideo.style.display = 'none';
                    }

                    return true;
                } catch (error) {
                    console.error('Error setting up peer connection:', error);
                    let errorMessage = 'Failed to access camera/microphone.';

                    if (error.name === 'NotAllowedError') {
                        errorMessage = 'Permission denied. Please allow access to camera/microphone.';
                    } else if (error.name === 'NotFoundError') {
                        errorMessage = 'No camera/microphone found. Please check your devices.';
                    } else if (error.name === 'NotReadableError') {
                        errorMessage = 'Camera/microphone is already in use by another application.';
                    }

                    this.showError(errorMessage);
                    return false;
                }
            }

            async handleIncomingCall(data) {
                console.log('Incoming call:', data);
                this.currentCall = data;
                this.isInitiator = false;

                // Show incoming call UI
                this.showIncomingCallScreen(data);

                // Play ringtone
                this.playRingtone();
            }

            async handleCallAccepted(data) {
                console.log('Call accepted:', data);
                this.currentCall = { ...this.currentCall, ...data };

                // Hide connecting screen and show active call
                this.showActiveCallScreen();

                // Create offer
                try {
                    const offer = await this.peerConnection.createOffer();
                    await this.peerConnection.setLocalDescription(offer);

                    socket.emit('call-offer', {
                        offer: offer,
                        to: this.currentCall.receiver?.id,
                        from: currentUserId,
                        callId: this.currentCall.callId
                    });
                } catch (error) {
                    console.error('Error creating offer:', error);
                    this.showError('Failed to establish connection');
                    this.endCall();
                }
            }

            async handleOffer(data) {
                console.log('Received offer:', data);

                try {
                    await this.peerConnection.setRemoteDescription(data.offer);
                    const answer = await this.peerConnection.createAnswer();
                    await this.peerConnection.setLocalDescription(answer);

                    socket.emit('call-answer', {
                        answer: answer,
                        to: data.from,
                        from: currentUserId,
                        callId: data.callId
                    });
                } catch (error) {
                    console.error('Error handling offer:', error);
                    this.showError('Failed to establish connection');
                    this.endCall();
                }
            }

            async handleAnswer(data) {
                console.log('Received answer:', data);

                try {
                    await this.peerConnection.setRemoteDescription(data.answer);
                } catch (error) {
                    console.error('Error handling answer:', error);
                    this.showError('Failed to establish connection');
                    this.endCall();
                }
            }

            async handleIceCandidate(data) {
                console.log('Received ICE candidate:', data);

                try {
                    if (this.peerConnection && this.peerConnection.remoteDescription) {
                        await this.peerConnection.addIceCandidate(data.candidate);
                    }
                } catch (error) {
                    console.error('Error adding ICE candidate:', error);
                }
            }

            handleCallDeclined(data) {
                console.log('Call declined:', data);
                this.showNotification('Call declined', 'info');
                this.hideCallModal();
                this.cleanup();
            }

            handleCallEnded(data) {
                console.log('Call ended:', data);
                this.showNotification('Call ended', 'info');
                this.hideCallModal();
                this.cleanup();
            }

            handleCallCancelled(data) {
                console.log('Call cancelled:', data);
                this.showNotification('Call cancelled', 'info');
                this.hideCallModal();
                this.cleanup();
                this.stopRingtone();
            }

            showIncomingCallScreen(data) {
                const modal = document.getElementById('callModal');
                const incomingScreen = document.getElementById('incomingCallScreen');
                const callerAvatar = document.getElementById('callerAvatar');
                const callerName = document.getElementById('callerName');
                const callTypeText = document.getElementById('callTypeText');

                // Set caller info
                callerAvatar.src = `/avatars/${data.caller?.avatar || 'default-avatar.png'}`;
                callerName.textContent = data.caller?.username || 'Unknown';
                callTypeText.textContent = `Incoming ${data.type || 'audio'} call...`;

                // Show modal and incoming screen
                modal.classList.remove('hidden');
                incomingScreen.classList.remove('hidden');

                // Hide other screens
                document.getElementById('activeCallScreen').classList.add('hidden');
                document.getElementById('connectingScreen').classList.add('hidden');
            }

            showConnectingScreen() {
                const modal = document.getElementById('callModal');
                const connectingScreen = document.getElementById('connectingScreen');

                // Show modal and connecting screen
                modal.classList.remove('hidden');
                connectingScreen.classList.remove('hidden');

                // Hide other screens
                document.getElementById('incomingCallScreen').classList.add('hidden');
                document.getElementById('activeCallScreen').classList.add('hidden');
            }

            showActiveCallScreen() {
                const modal = document.getElementById('callModal');
                const activeScreen = document.getElementById('activeCallScreen');

                // Show modal and active screen
                modal.classList.remove('hidden');
                activeScreen.classList.remove('hidden');

                // Hide other screens
                document.getElementById('incomingCallScreen').classList.add('hidden');
                document.getElementById('connectingScreen').classList.add('hidden');
            }

            hideCallModal() {
                const modal = document.getElementById('callModal');
                modal.classList.add('hidden');

                // Hide all screens
                document.getElementById('incomingCallScreen').classList.add('hidden');
                document.getElementById('activeCallScreen').classList.add('hidden');
                document.getElementById('connectingScreen').classList.add('hidden');
            }

            async acceptCall() {
                console.log('Accepting call:', this.currentCall);

                if (!this.currentCall) {
                    console.error('No current call to accept');
                    return;
                }

                // Initialize peer connection
                const isVideo = this.currentCall.type === 'video';
                const success = await this.initiatePeerConnection(isVideo);

                if (!success) {
                    this.declineCall();
                    return;
                }

                // Send accept response to server
                try {
                    const response = await fetch(`/call/${this.currentCall.callId}/respond`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ action: 'accept' })
                    });

                    if (response.ok) {
                        this.showActiveCallScreen();
                        this.stopRingtone();
                    } else {
                        throw new Error('Failed to accept call');
                    }
                } catch (error) {
                    console.error('Error accepting call:', error);
                    this.showError('Failed to accept call');
                    this.declineCall();
                }
            }

            async declineCall() {
                console.log('Declining call:', this.currentCall);

                if (this.currentCall) {
                    try {
                        await fetch(`/call/${this.currentCall.callId}/respond`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ action: 'decline' })
                        });
                    } catch (error) {
                        console.error('Error declining call:', error);
                    }
                }

                this.hideCallModal();
                this.cleanup();
                this.stopRingtone();
            }

            async endCall() {
                console.log('Ending call:', this.currentCall);

                if (this.currentCall) {
                    try {
                        await fetch(`/call/${this.currentCall.callId}/end`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' }
                        });
                    } catch (error) {
                        console.error('Error ending call:', error);
                    }
                }

                this.hideCallModal();
                this.cleanup();
            }

            cancelCall() {
                console.log('Cancelling call:', this.currentCall);

                if (this.currentCall && this.isInitiator) {
                    socket.emit('cancel-call', {
                        to: this.currentCall.receiver?.id,
                        callId: this.currentCall.callId
                    });
                }

                this.hideCallModal();
                this.cleanup();
            }

            toggleMute() {
                if (!this.localStream) {
                    console.warn('No local stream available');
                    return;
                }

                const audioTrack = this.localStream.getAudioTracks()[0];
                if (audioTrack) {
                    audioTrack.enabled = !audioTrack.enabled;
                    this.isMuted = !audioTrack.enabled;

                    // Update UI
                    this.updateMuteButton();
                }
            }

            toggleVideo() {
                if (!this.localStream) {
                    console.warn('No local stream available');
                    return;
                }

                const videoTrack = this.localStream.getVideoTracks()[0];
                if (videoTrack) {
                    videoTrack.enabled = !videoTrack.enabled;
                    this.isVideoOff = !videoTrack.enabled;

                    // Update UI
                    this.updateVideoButton();
                }
            }

            updateMuteButton() {
                const muteBtn = document.getElementById('muteBtn');
                if (!muteBtn) return;

                if (this.isMuted) {
                    muteBtn.classList.add('bg-red-600');
                    muteBtn.classList.remove('bg-gray-800');
                    muteBtn.innerHTML = `
                        <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                  d="M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z" clip-rule="evenodd"/>
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2"/>
                        </svg>
                    `;
                } else {
                    muteBtn.classList.remove('bg-red-600');
                    muteBtn.classList.add('bg-gray-800');
                    muteBtn.innerHTML = `
                        <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                  d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z"/>
                        </svg>
                    `;
                }
            }

            updateVideoButton() {
                const videoBtn = document.getElementById('videoBtn');
                const localVideo = document.getElementById('localVideo');
                if (!videoBtn) return;

                if (this.isVideoOff) {
                    videoBtn.classList.add('bg-red-600');
                    videoBtn.classList.remove('bg-gray-800');
                    if (localVideo) localVideo.style.display = 'none';
                    videoBtn.innerHTML = `
                        <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                  d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L18.364 5.636M5.636 18.364l12.728-12.728"/>
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                  d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"/>
                        </svg>
                    `;
                } else {
                    videoBtn.classList.remove('bg-red-600');
                    videoBtn.classList.add('bg-gray-800');
                    if (localVideo) localVideo.style.display = 'block';
                    videoBtn.innerHTML = `
                        <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                  d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"/>
                        </svg>
                    `;
                }
            }

            cleanup() {
                // Stop local stream
                if (this.localStream) {
                    this.localStream.getTracks().forEach(track => {
                        track.stop();
                    });
                    this.localStream = null;
                }

                // Close peer connection
                if (this.peerConnection) {
                    this.peerConnection.close();
                    this.peerConnection = null;
                }

                // Reset call state
                this.currentCall = null;
                this.isInitiator = false;
                this.isMuted = false;
                this.isVideoOff = false;
                this.remoteStream = null;

                // Clear video elements
                const localVideo = document.getElementById('localVideo');
                const remoteVideo = document.getElementById('remoteVideo');

                if (localVideo) {
                    localVideo.srcObject = null;
                    localVideo.style.display = 'none';
                }
                if (remoteVideo) {
                    remoteVideo.srcObject = null;
                }

                // Stop ringtone
                this.stopRingtone();
            }

            playRingtone() {
                try {
                    // Create a simple beep sound using Web Audio API as fallback
                    if (typeof AudioContext !== 'undefined' || typeof webkitAudioContext !== 'undefined') {
                        const AudioCtx = AudioContext || webkitAudioContext;
                        const audioContext = new AudioCtx();

                        const createBeep = () => {
                            const oscillator = audioContext.createOscillator();
                            const gainNode = audioContext.createGain();

                            oscillator.connect(gainNode);
                            gainNode.connect(audioContext.destination);

                            oscillator.frequency.value = 800;
                            oscillator.type = 'sine';

                            gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
                            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);

                            oscillator.start(audioContext.currentTime);
                            oscillator.stop(audioContext.currentTime + 0.5);
                        };

                        // Play beep every 2 seconds
                        this.ringtoneInterval = setInterval(createBeep, 2000);
                        createBeep(); // Play immediately
                    }
                } catch (error) {
                    console.warn('Could not play ringtone:', error);
                }
            }

            stopRingtone() {
                if (this.ringtoneInterval) {
                    clearInterval(this.ringtoneInterval);
                    this.ringtoneInterval = null;
                }

                if (this.ringtone) {
                    this.ringtone.pause();
                    this.ringtone.currentTime = 0;
                    this.ringtone = null;
                }
            }

            showError(message) {
                showNotification(message, 'error');
            }

            showNotification(message, type = 'info') {
                showNotification(message, type);
            }
        }

        // Initialize call manager
        const callManager = new CallManager();

        // Voice Message Manager Class
        class VoiceMessageManager {
            constructor() {
                this.mediaRecorder = null;
                this.recordedBlob = null;
                this.isRecording = false;
                this.isPaused = false;
                this.startTime = null;
                this.timerInterval = null;

                this.initiateRecorder();
                this.setupEventListeners();
            }

            initiateRecorder() {
                if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                    navigator.mediaDevices.getUserMedia({ audio: true })
                        .then((stream) => {
                            this.audioStream = stream;
                            this.mediaRecorder = new MediaRecorder(stream, { mimeType: 'audio/webm' });

                            // Event for when data is available
                            this.mediaRecorder.ondataavailable = (event) => {
                                if (event.data.size > 0) {
                                    this.recordedBlob = event.data;
                                    this.updateProgress(this.recordedBlob);
                                }
                            };

                            // Event for when recording stops
                            this.mediaRecorder.onstop = () => {
                                this.isRecording = false;
                                this.isPaused = false;
                                clearInterval(this.timerInterval);
                                recordingTimer.textContent = '0:00';
                                this.toggleRecordingUI(false);
                            };

                        })
                        .catch((error) => {
                            console.error('Error accessing microphone:', error);
                            showNotification('Could not access microphone. Please check permissions.', 'error');
                        });
                } else {
                    showNotification('MediaRecorder not supported in this browser.', 'error');
                }
            }

            setupEventListeners() {
                voiceMessageBtn.addEventListener('click', () => {
                    if (this.isRecording) {
                        this.pauseRecording();
                    } else {
                        this.startRecording();
                    }
                });

                cancelRecording.addEventListener('click', () => this.deleteRecording());
                sendVoiceMessage.addEventListener('click', () => this.sendVoiceMessage());

                playRecordedVoice.addEventListener('click', () => {
                    if (this.recordedBlob) {
                        this.togglePlayPause();
                    }
                });
            }

            startRecording() {
                if (!this.mediaRecorder) return;

                this.recordedBlob = null; // Clear previous recording
                voiceRecordingPreview.classList.remove('hidden');
                this.toggleRecordingUI(true);

                this.mediaRecorder.start();
                this.isRecording = true;
                this.startTime = Date.now();
                this.startTimer();
                console.log('Recording started');
            }

            pauseRecording() {
                if (!this.isRecording || !this.mediaRecorder) return;

                if (this.isPaused) {
                    this.mediaRecorder.resume();
                    this.isPaused = false;
                    this.startTimer(); // Restart timer
                    playRecordedVoice.innerHTML = `
                        <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                        </svg>`;
                    console.log('Recording resumed');
                } else {
                    this.mediaRecorder.pause();
                    this.isPaused = true;
                    clearInterval(this.timerInterval); // Pause timer
                    playRecordedVoice.innerHTML = `
                        <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.166a1 1 0 00-1.197-.773 1 1 0 00-.773 1.197l.62 4.361a1 1 0 01-.467 1.062L10 20v-8.752c0-.248.537-.484 1.2-.659l3.493-1.747Z"/>
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19v-6.752c0-.248.537-.484 1.2-.659l3.493-1.747a1 1 0 00.595-.883L14.752 11.166z"/>
                        </svg>`;
                    console.log('Recording paused');
                }
            }

            stopRecording() {
                if (this.mediaRecorder && this.isRecording) {
                    this.mediaRecorder.stop();
                    console.log('Recording stopped');
                }
            }

            deleteRecording() {
                this.stopRecording();
                this.recordedBlob = null;
                voiceRecordingPreview.classList.add('hidden');
                this.resetProgressAndTimer();
                console.log('Recording deleted');
            }

            toggleRecordingUI(isRecording) {
                const micIcon = voiceMessageBtn.querySelector('svg');
                if (isRecording) {
                    voiceMessageBtn.classList.add('bg-gradient-to-r', 'from-yellow-500', 'to-orange-500');
                    voiceMessageBtn.classList.remove('bg-gradient-to-r', 'from-green-500', 'to-green-600');
                    micIcon.innerHTML = `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z" clip-rule="evenodd"/><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2"/>`; // Pause icon
                    voiceMessageBtn.setAttribute('title', 'Pause Recording');
                    cancelRecording.classList.remove('hidden');
                    playRecordedVoice.classList.add('hidden');
                    sendVoiceMessage.classList.add('hidden');
                } else {
                    voiceMessageBtn.classList.remove('bg-gradient-to-r', 'from-yellow-500', 'to-orange-500');
                    voiceMessageBtn.classList.add('bg-gradient-to-r', 'from-green-500', 'to-green-600');
                    micIcon.innerHTML = `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z"></path>`; // Mic icon
                    voiceMessageBtn.setAttribute('title', 'Start Recording');
                    cancelRecording.classList.add('hidden');
                    playRecordedVoice.classList.remove('hidden');
                    sendVoiceMessage.classList.remove('hidden');
                }
            }

            startTimer() {
                this.startTime = Date.now();
                this.timerInterval = setInterval(() => {
                    const elapsed = Math.floor((Date.now() - this.startTime) / 1000);
                    const minutes = Math.floor(elapsed / 60);
                    const seconds = elapsed % 60;
                    recordingTimer.textContent = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
                    recordedDuration.textContent = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
                }, 1000);
            }

            updateProgress(blob) {
                if (!blob) return;
                const audioUrl = URL.createObjectURL(blob);
                const audioElement = new Audio(audioUrl);
                audioElement.onloadedmetadata = () => {
                    const duration = audioElement.duration;
                    const progressWidth = (duration / 60) * 100; // Assuming max recording time of 60 seconds for progress bar visualization
                    voiceProgress.forEach(bar => bar.style.width = `${Math.min(progressWidth, 100)}%`);
                    URL.revokeObjectURL(audioUrl); // Clean up the object URL
                };
            }

            resetProgressAndTimer() {
                recordingTimer.textContent = '0:00';
                recordedDuration.textContent = '0:00';
                voiceProgress.forEach(bar => bar.style.width = '0%');
                playRecordedVoice.innerHTML = `
                    <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.166a1 1 0 00-1.197-.773 1 1 0 00-.773 1.197l.62 4.361a1 1 0 01-.467 1.062L10 20v-8.752c0-.248.537-.484 1.2-.659l3.493-1.747Z"/>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19v-6.752c0-.248.537-.484 1.2-.659l3.493-1.747a1 1 0 00.595-.883L14.752 11.166z"/>
                    </svg>`;
            }

            async togglePlayPause() {
                if (!this.recordedBlob) return;

                const playBtn = playRecordedVoice;
                const pauseIcon = playBtn.querySelector('.pause-icon');
                const playIcon = playBtn.querySelector('.play-icon');

                const audioUrl = URL.createObjectURL(this.recordedBlob);
                const audioElement = new Audio(audioUrl);

                if (audioElement.paused) {
                    audioElement.play();
                    playIcon.classList.add('hidden');
                    pauseIcon.classList.remove('hidden');
                    playBtn.classList.add('bg-gray-600');
                    playBtn.classList.remove('bg-primary-500');
                    playBtn.setAttribute('title', 'Pause');

                    // Update progress bar during playback
                    audioElement.ontimeupdate = () => {
                        const progressWidth = (audioElement.currentTime / audioElement.duration) * 100;
                        voiceProgress.forEach(bar => bar.style.width = `${progressWidth}%`);
                        const currentTimeMinutes = Math.floor(audioElement.currentTime / 60);
                        const currentTimeSeconds = Math.floor(audioElement.currentTime % 60);
                        recordedDuration.textContent = `${currentTimeMinutes}:${currentTimeSeconds < 10 ? '0' : ''}${currentTimeSeconds}`;
                    };

                    audioElement.onended = () => {
                        playIcon.classList.remove('hidden');
                        pauseIcon.classList.add('hidden');
                        playBtn.classList.remove('bg-gray-600');
                        playBtn.classList.add('bg-primary-500');
                        playBtn.setAttribute('title', 'Play');
                        this.resetProgressAndTimer(); // Reset timer and progress on completion
                    };

                } else {
                    audioElement.pause();
                    playIcon.classList.remove('hidden');
                    pauseIcon.classList.add('hidden');
                    playBtn.classList.add('bg-primary-500');
                    playBtn.classList.remove('bg-gray-600');
                    playBtn.setAttribute('title', 'Play');
                }
            }

            async sendVoiceMessage() {
                if (!this.recordedBlob) return;

                try {
                    const formData = new FormData();
                    const audioFile = new File([this.recordedBlob], `voice_${Date.now()}.webm`, { type: 'audio/webm' });
                    formData.append('media', audioFile);

                    const response = await fetch(`/chat/${otherUserId}`, {
                        method: 'POST',
                        body: formData
                    });

                    if (response.ok) {
                        this.deleteRecording();
                    } else {
                        throw new Error('Failed to send voice message');
                    }
                } catch (error) {
                    console.error('Error sending voice message:', error);
                    alert('Failed to send voice message');
                }
            }
        }

        // Initialize voice message manager
        const voiceManager = new VoiceMessageManager();


        // Global functions for UI interaction
        async function initiateCall(type) {
            if (!otherUserId) {
                callManager.showError('Invalid user for calling');
                return;
            }

            console.log(`Initiating ${type} call to:`, otherUserId);

            // Initialize peer connection
            const success = await callManager.initiatePeerConnection(type === 'video');
            if (!success) {
                return;
            }

            try {
                const response = await fetch('/call/initiate', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        receiverId: otherUserId,
                        type: type
                    })
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();

                if (data.success) {
                    callManager.currentCall = {
                        callId: data.callId,
                        receiver: { id: otherUserId },
                        type: type
                    };
                    callManager.isInitiator = true;
                    callManager.showConnectingScreen();
                } else {
                    throw new Error(data.error || 'Failed to initiate call');
                }
            } catch (error) {
                console.error('Error initiating call:', error);
                callManager.showError('Failed to initiate call: ' + error.message);
                callManager.cleanup();
            }
        }

        function acceptCall() {
            callManager.acceptCall();
        }

        function declineCall() {
            callManager.declineCall();
        }

        function endCall() {
            callManager.endCall();
        }

        function cancelCall() {
            callManager.cancelCall();
        }

        function toggleMute() {
            callManager.toggleMute();
        }

        function toggleVideo() {
            callManager.toggleVideo();
        }

        // Handle page unload - cleanup calls
        window.addEventListener('beforeunload', () => {
            if (callManager.currentCall) {
                callManager.endCall();
            }
        });

        // Handle visibility change - pause/resume video on tab switch
        document.addEventListener('visibilitychange', () => {
            if (callManager.localStream && callManager.currentCall) {
                const videoTrack = callManager.localStream.getVideoTracks()[0];
                if (videoTrack) {
                    videoTrack.enabled = !document.hidden && !callManager.isVideoOff;
                }
            }
        });

        // Add keyboard shortcuts for call controls
        document.addEventListener('keydown', (event) => {
            if (!callManager.currentCall) return;

            // Only handle shortcuts when call modal is visible
            const callModal = document.getElementById('callModal');
            if (callModal.classList.contains('hidden')) return;

            switch(event.key.toLowerCase()) {
                case 'm':
                    event.preventDefault();
                    toggleMute();
                    break;
                case 'v':
                    event.preventDefault();
                    toggleVideo();
                    break;
                case 'escape':
                    event.preventDefault();
                    endCall();
                    break;
            }
        });

        // Error handling for WebRTC
        window.addEventListener('error', (event) => {
            if (event.error && event.error.name === 'NotAllowedError') {
                callManager.showError('Permission denied. Please allow access to camera/microphone.');
            }
        });

        // Cleanup socket listeners on page unload
        window.addEventListener('beforeunload', () => {
            socket.disconnect();
        });

        // Add event listeners for voice message play/pause buttons
        document.addEventListener('click', (e) => {
            const playBtn = e.target.closest('.voice-play-btn');
            if (playBtn) {
                const audioSrc = playBtn.getAttribute('data-audio-src');
                const voiceMessageContainer = playBtn.closest('.voice-message-container');
                const pauseIcon = playBtn.querySelector('.pause-icon');
                const playIcon = playBtn.querySelector('.play-icon');
                const progressBar = voiceMessageContainer.querySelector('.voice-progress');
                const durationDisplay = voiceMessageContainer.querySelector('.voice-duration');

                // Create or reuse audio element
                let audioElement = voiceMessageContainer.querySelector('audio');
                if (!audioElement) {
                    audioElement = document.createElement('audio');
                    audioElement.src = audioSrc;
                    audioElement.dataset.messageId = voiceMessageContainer.closest('.message-container').getAttribute('data-id');
                    voiceMessageContainer.appendChild(audioElement); // Append to container for scope
                }

                const messageId = audioElement.dataset.messageId;

                if (audioElement.paused) {
                    // Stop any other playing voice messages
                    document.querySelectorAll('.voice-play-btn').forEach(btn => {
                        const otherAudioElement = btn.closest('.voice-message-container').querySelector('audio');
                        if (otherAudioElement && otherAudioElement !== audioElement && !otherAudioElement.paused) {
                            otherAudioElement.pause();
                            const otherPlayBtn = btn;
                            const otherPauseIcon = otherPlayBtn.querySelector('.pause-icon');
                            const otherPlayIcon = otherPlayBtn.querySelector('.play-icon');
                            otherPlayIcon.classList.remove('hidden');
                            otherPauseIcon.classList.add('hidden');
                            otherPlayBtn.classList.add('bg-primary-500');
                            otherPlayBtn.classList.remove('bg-gray-600');
                            otherPlayBtn.setAttribute('title', 'Play');
                            // Reset progress bar and duration for others
                            const otherProgressBar = btn.closest('.voice-message-container').querySelector('.voice-progress');
                            const otherDurationDisplay = btn.closest('.voice-message-container').querySelector('.voice-duration');
                            otherProgressBar.style.width = '0%';
                            otherDurationDisplay.textContent = '0:00';
                        }
                    });

                    audioElement.play();
                    playIcon.classList.add('hidden');
                    pauseIcon.classList.remove('hidden');
                    playBtn.classList.add('bg-gray-600');
                    playBtn.classList.remove('bg-primary-500');
                    playBtn.setAttribute('title', 'Pause');

                    // Update progress bar during playback
                    audioElement.ontimeupdate = () => {
                        const progressWidth = (audioElement.currentTime / audioElement.duration) * 100;
                        progressBar.style.width = `${progressWidth}%`;
                        const currentTimeMinutes = Math.floor(audioElement.currentTime / 60);
                        const currentTimeSeconds = Math.floor(audioElement.currentTime % 60);
                        durationDisplay.textContent = `${currentTimeMinutes}:${currentTimeSeconds < 10 ? '0' : ''}${currentTimeSeconds}`;
                    };

                    // Reset when playback ends
                    audioElement.onended = () => {
                        playIcon.classList.remove('hidden');
                        pauseIcon.classList.add('hidden');
                        playBtn.classList.add('bg-primary-500');
                        playBtn.classList.remove('bg-gray-600');
                        playBtn.setAttribute('title', 'Play');
                        progressBar.style.width = '0%';
                        durationDisplay.textContent = '0:00';
                        // Clean up audio element if not needed anymore
                        // audioElement.remove();
                    };
                } else {
                    audioElement.pause();
                    playIcon.classList.remove('hidden');
                    pauseIcon.classList.add('hidden');
                    playBtn.classList.add('bg-primary-500');
                    playBtn.classList.remove('bg-gray-600');
                    playBtn.setAttribute('title', 'Play');
                }
            }
        });

        console.log('Chat application initialized successfully');
    </script>
</body>
</html>